{"version":3,"file":"sift.min.js","sources":["src/utils.ts","src/core.ts","src/operations.ts","src/index.ts"],"sourcesContent":["export type Key = string | number;\nexport type Comparator = (a, b) => boolean;\nexport const typeChecker = <TType>(type) => {\n  const typeString = \"[object \" + type + \"]\";\n  return function(value): value is TType {\n    return getClassName(value) === typeString;\n  };\n};\n\nconst getClassName = value => Object.prototype.toString.call(value);\n\nexport const comparable = (value: any) => {\n  if (value instanceof Date) {\n    return value.getTime();\n  } else if (isArray(value)) {\n    return value.map(comparable);\n  } else if (value && typeof value.toJSON === \"function\") {\n    return value.toJSON();\n  }\n\n  return value;\n};\n\nexport const isArray = typeChecker<Array<any>>(\"Array\");\nexport const isObject = typeChecker<Object>(\"Object\");\nexport const isFunction = typeChecker<Function>(\"Function\");\nexport const isVanillaObject = value => {\n  return (\n    value &&\n    (value.constructor === Object ||\n      value.constructor === Array ||\n      value.constructor.toString() === \"function Object() { [native code] }\" ||\n      value.constructor.toString() === \"function Array() { [native code] }\") &&\n    !value.toJSON\n  );\n};\n\nexport const equals = (a, b) => {\n  if (a == null && a == b) {\n    return true;\n  }\n  if (a === b) {\n    return true;\n  }\n\n  if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\n    return false;\n  }\n\n  if (isArray(a)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0, { length } = a; i < length; i++) {\n      if (!equals(a[i], b[i])) return false;\n    }\n    return true;\n  } else if (isObject(a)) {\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      return false;\n    }\n    for (const key in a) {\n      if (!equals(a[key], b[key])) return false;\n    }\n    return true;\n  }\n  return false;\n};\n","import {\n  isArray,\n  Key,\n  Comparator,\n  isVanillaObject,\n  comparable,\n  equals\n} from \"./utils\";\n\nexport interface Operation {\n  readonly success: boolean;\n  readonly done: boolean;\n  reset();\n  next(item: any, key: Key, owner: any);\n}\n\nexport type Tester = (item: any, key?: Key, owner?: any) => boolean;\n\nexport type OperationCreator = (\n  params: any,\n  parentQuery: any,\n  options: Options\n) => Operation;\n\nexport type Query = {\n  [identifier: string]: Query | Object | undefined;\n  $eq?: any;\n  $ne?: any;\n  $elemMatch?: Query;\n  $lt?: number;\n  $gt?: number;\n  $lte?: number;\n  $gte?: number;\n  $mod?: [number, number];\n  $exists?: boolean;\n  $regex?: string;\n  $options?: \"i\" | \"g\" | \"m\" | \"u\";\n  $type: Function;\n  $or?: Query[];\n  $nor?: Query[];\n};\n\n/**\n * Walks through each value given the context - used for nested operations. E.g:\n * { \"person.address\": { $eq: \"blarg\" }}\n */\n\nconst walkKeyPathValues = (\n  item: any,\n  keyPath: Key[],\n  next: Tester,\n  depth: number,\n  key: Key,\n  owner: any\n) => {\n  const currentKey = keyPath[depth];\n\n  // if array, then try matching. Might fall through for cases like:\n  // { $eq: [1, 2, 3] }, [ 1, 2, 3 ].\n  if (isArray(item) && isNaN(Number(currentKey))) {\n    for (let i = 0, { length } = item; i < length; i++) {\n      // if FALSE is returned, then terminate walker. For operations, this simply\n      // means that the search critera was met.\n      if (!walkKeyPathValues(item[i], keyPath, next, depth, i, item)) {\n        return false;\n      }\n    }\n  }\n\n  if (depth === keyPath.length || item == null) {\n    return next(item, key, owner);\n  }\n\n  return walkKeyPathValues(\n    item[currentKey],\n    keyPath,\n    next,\n    depth + 1,\n    currentKey,\n    item\n  );\n};\n\nexport abstract class BaseOperation<TParams> implements Operation {\n  success: boolean;\n  done: boolean;\n  constructor(\n    readonly params: TParams,\n    readonly owneryQuery: any,\n    readonly options: Options\n  ) {\n    this.init();\n  }\n  protected init() {}\n  reset() {\n    this.done = false;\n    this.success = false;\n  }\n  abstract next(item: any, key: Key, parent: any);\n}\n\nexport abstract class GroupOperation extends BaseOperation<any> {\n  success: boolean;\n  done: boolean;\n\n  constructor(\n    params: any,\n    owneryQuery: any,\n    options: Options,\n    protected readonly _children: Operation[]\n  ) {\n    super(params, owneryQuery, options);\n  }\n\n  /**\n   */\n\n  reset() {\n    this.success = false;\n    this.done = false;\n    for (let i = 0, { length } = this._children; i < length; i++) {\n      this._children[i].reset();\n    }\n  }\n\n  abstract next(item: any, key: Key, owner: any);\n\n  /**\n   */\n\n  protected childrenNext(item: any, key: Key, owner: any) {\n    let done = true;\n    let success = true;\n    for (let i = 0, { length } = this._children; i < length; i++) {\n      const childOperation = this._children[i];\n      childOperation.next(item, key, owner);\n      if (!childOperation.success) {\n        success = false;\n      }\n      if (childOperation.done) {\n        if (!childOperation.success) {\n          break;\n        }\n      } else {\n        done = false;\n      }\n    }\n    // console.log(\"DONE\", this.params, done, success);\n    this.done = done;\n    this.success = success;\n  }\n}\n\nexport class QueryOperation extends GroupOperation {\n  /**\n   */\n\n  next(item: any, key: Key, parent: any) {\n    this.childrenNext(item, key, parent);\n  }\n}\n\nexport class NestedOperation extends GroupOperation {\n  constructor(\n    readonly keyPath: Key[],\n    params: any,\n    owneryQuery: any,\n    options: Options,\n    children: Operation[]\n  ) {\n    super(params, owneryQuery, options, children);\n  }\n  /**\n   */\n\n  next(item: any, key: Key, parent: any) {\n    walkKeyPathValues(\n      item,\n      this.keyPath,\n      this._nextNestedValue,\n      0,\n      key,\n      parent\n    );\n  }\n\n  /**\n   */\n\n  private _nextNestedValue = (value: any, key: Key, owner: any) => {\n    this.childrenNext(value, key, owner);\n    return !this.done;\n  };\n}\n\nexport const createTester = (a, compare: Comparator) => {\n  if (a instanceof Function) {\n    return a;\n  }\n  if (a instanceof RegExp) {\n    return b => typeof b === \"string\" && a.test(b);\n  }\n  const comparableA = comparable(a);\n  return b => compare(comparableA, comparable(b));\n};\n\nexport class EqualsOperation<TParam> extends BaseOperation<TParam> {\n  private _test: Tester;\n  init() {\n    this._test = createTester(this.params, this.options.compare);\n  }\n  next(item, key: Key, parent: any) {\n    if (this._test(item, key, parent)) {\n      this.done = true;\n      this.success = true;\n    }\n  }\n}\n\nexport const createEqualsOperation = (\n  params: any,\n  owneryQuery: any,\n  options: Options\n) => new EqualsOperation(params, owneryQuery, options);\n\nexport class NopeOperation<TParam> extends BaseOperation<TParam> {\n  next() {\n    this.done = true;\n    this.success = false;\n  }\n}\n\nexport const numericalOperationCreator = (\n  createNumericalOperation: OperationCreator\n) => (params: any, owneryQuery: any, options: Options) => {\n  if (params == null) {\n    return new NopeOperation(params, owneryQuery, options);\n  }\n\n  return createNumericalOperation(params, owneryQuery, options);\n};\n\nexport const numericalOperation = (createTester: (any) => Tester) =>\n  numericalOperationCreator(\n    (params: any, owneryQuery: Query, options: Options) => {\n      const typeofParams = typeof comparable(params);\n      const test = createTester(params);\n      return new EqualsOperation(\n        b => {\n          return typeof comparable(b) === typeofParams && test(b);\n        },\n        owneryQuery,\n        options\n      );\n    }\n  );\n\nexport type Options = {\n  operations: {\n    [identifier: string]: OperationCreator;\n  };\n  compare: (a, b) => boolean;\n};\n\nconst createOperation = (\n  name: string,\n  params: any,\n  parentQuery: any,\n  options: Options\n) => {\n  const operationCreator = options.operations[name];\n  if (!operationCreator) {\n    throw new Error(`Unsupported operation: ${name}`);\n  }\n  return operationCreator(params, parentQuery, options);\n};\n\nconst containsOperation = (query: any) => {\n  for (const key in query) {\n    if (key.charAt(0) === \"$\") return true;\n  }\n  return false;\n};\nconst createNestedOperation = (\n  keyPath: Key[],\n  nestedQuery: any,\n  owneryQuery: any,\n  options: Options\n) => {\n  if (containsOperation(nestedQuery)) {\n    const [selfOperations, nestedOperations] = createQueryOperations(\n      nestedQuery,\n      options\n    );\n    if (nestedOperations.length) {\n      throw new Error(\n        `Property queries must contain only operations, or exact objects.`\n      );\n    }\n    return new NestedOperation(\n      keyPath,\n      nestedQuery,\n      owneryQuery,\n      options,\n      selfOperations\n    );\n  }\n  return new NestedOperation(keyPath, nestedQuery, owneryQuery, options, [\n    new EqualsOperation(nestedQuery, owneryQuery, options)\n  ]);\n};\n\nexport const createQueryOperation = (\n  query: any,\n  owneryQuery: any,\n  options: Options\n) => {\n  const [selfOperations, nestedOperations] = createQueryOperations(\n    query,\n    options\n  );\n\n  const ops = [];\n\n  if (selfOperations.length) {\n    ops.push(\n      new NestedOperation([], query, owneryQuery, options, selfOperations)\n    );\n  }\n\n  ops.push(...nestedOperations);\n\n  if (ops.length === 1) {\n    return ops[0];\n  }\n  return new QueryOperation(query, owneryQuery, options, ops);\n};\n\nconst createQueryOperations = (query: any, options: Options) => {\n  const selfOperations = [];\n  const nestedOperations = [];\n  if (!isVanillaObject(query)) {\n    selfOperations.push(new EqualsOperation(query, query, options));\n    return [selfOperations, nestedOperations];\n  }\n  for (const key in query) {\n    if (key.charAt(0) === \"$\") {\n      const op = createOperation(key, query[key], query, options);\n\n      // probably just a flag for another operation (like $options)\n      if (op != null) {\n        selfOperations.push(op);\n      }\n    } else {\n      nestedOperations.push(\n        createNestedOperation(key.split(\".\"), query[key], query, options)\n      );\n    }\n  }\n\n  return [selfOperations, nestedOperations];\n};\n\nexport const createQueryTester = <TItem>(\n  query: Query,\n  { compare, operations }: Partial<Options> = {}\n) => {\n  const operation = createQueryOperation(query, null, {\n    compare: compare || equals,\n    operations: Object.assign({}, operations || {})\n  });\n  return (item: TItem, key?: Key, owner?: any) => {\n    operation.reset();\n    operation.next(item, key, owner);\n    return operation.success;\n  };\n};\n","import {\n  BaseOperation,\n  EqualsOperation,\n  Options,\n  createTester,\n  Tester,\n  createQueryOperation,\n  QueryOperation,\n  numericalOperationCreator,\n  Operation,\n  Query,\n  GroupOperation,\n  numericalOperation\n} from \"./core\";\nimport { Key, comparable, isFunction, isArray } from \"./utils\";\n\nclass $Ne extends BaseOperation<any> {\n  private _test: Tester;\n  init() {\n    this._test = createTester(this.params, this.options.compare);\n  }\n  reset() {\n    super.reset();\n    this.success = true;\n  }\n  next(item: any) {\n    if (this._test(item)) {\n      this.done = true;\n      this.success = false;\n    }\n  }\n}\n\n// https://docs.mongodb.com/manual/reference/operator/query/elemMatch/\nclass $ElemMatch extends BaseOperation<Query> {\n  private _queryOperation: QueryOperation;\n  private _current: any;\n  init() {\n    this._queryOperation = createQueryOperation(\n      this.params,\n      this.owneryQuery,\n      this.options\n    );\n  }\n  reset() {\n    this._queryOperation.reset();\n  }\n  next(item: any, key: Key, owner: any[]) {\n    this._queryOperation.reset();\n    if (isArray(owner)) {\n      this._queryOperation.next(item, key, owner);\n      this.done = this._queryOperation.done || key === owner.length - 1;\n      this.success = this._queryOperation.success;\n    } else {\n      this.done = true;\n      this.success = false;\n    }\n  }\n}\n\nclass $Not extends BaseOperation<Query> {\n  private _queryOperation: QueryOperation;\n  init() {\n    this._queryOperation = createQueryOperation(\n      this.params,\n      this.owneryQuery,\n      this.options\n    );\n  }\n  reset() {\n    this._queryOperation.reset();\n  }\n  next(item: any, key: Key, owner: any) {\n    this._queryOperation.next(item, key, owner);\n    this.done = this._queryOperation.done;\n    this.success = !this._queryOperation.success;\n  }\n}\n\nclass $Or extends BaseOperation<any> {\n  private _ops: Operation[];\n  init() {\n    this._ops = this.params.map(op =>\n      createQueryOperation(op, null, this.options)\n    );\n  }\n  reset() {\n    this.done = false;\n    this.success = false;\n    for (let i = 0, { length } = this._ops; i < length; i++) {\n      this._ops[i].reset();\n    }\n  }\n  next(item: any, key: Key, owner: any) {\n    let done = false;\n    let success = false;\n    for (let i = 0, { length } = this._ops; i < length; i++) {\n      const op = this._ops[i];\n      op.next(item, key, owner);\n      if (op.success) {\n        done = true;\n        success = op.success;\n        break;\n      }\n    }\n\n    this.success = success;\n    this.done = done;\n  }\n}\n\nclass $Nor extends $Or {\n  next(item: any, key: Key, owner: any) {\n    super.next(item, key, owner);\n    this.success = !this.success;\n  }\n}\n\nclass $Exists extends BaseOperation<boolean> {\n  next(item: any, key: Key, owner: any) {\n    if (owner.hasOwnProperty(key) === this.params) {\n      this.done = true;\n      this.success = true;\n    }\n  }\n}\n\nclass $And extends GroupOperation {\n  constructor(params: Query[], owneryQuery: Query, options: Options) {\n    super(\n      params,\n      owneryQuery,\n      options,\n      params.map(query => createQueryOperation(query, owneryQuery, options))\n    );\n  }\n  next(item: any, key: Key, owner: any) {\n    this.childrenNext(item, key, owner);\n  }\n}\n\nexport const $eq = (params: any, owneryQuery: Query, options: Options) =>\n  new EqualsOperation(params, owneryQuery, options);\nexport const $ne = (params: any, owneryQuery: Query, options: Options) =>\n  new $Ne(params, owneryQuery, options);\nexport const $or = (params: Query[], owneryQuery: Query, options: Options) =>\n  new $Or(params, owneryQuery, options);\nexport const $nor = (params: Query[], owneryQuery: Query, options: Options) =>\n  new $Nor(params, owneryQuery, options);\nexport const $elemMatch = (params: any, owneryQuery: Query, options: Options) =>\n  new $ElemMatch(params, owneryQuery, options);\nexport const $nin = (params: any, owneryQuery: Query, options: Options) =>\n  new $Nor(params, owneryQuery, options);\nexport const $in = (params: any, owneryQuery: Query, options: Options) =>\n  new $Or(params, owneryQuery, options);\n\nexport const $lt = numericalOperation(params => b => b < params);\nexport const $lte = numericalOperation(params => b => b <= params);\nexport const $gt = numericalOperation(params => b => b > params);\nexport const $gte = numericalOperation(params => b => b >= params);\nexport const $mod = (\n  [mod, equalsValue]: number[],\n  owneryQuery: Query,\n  options: Options\n) =>\n  new EqualsOperation(\n    b => comparable(b) % mod === equalsValue,\n    owneryQuery,\n    options\n  );\nexport const $exists = (\n  params: boolean,\n  owneryQuery: Query,\n  options: Options\n) => new $Exists(params, owneryQuery, options);\nexport const $regex = (pattern: string, owneryQuery: Query, options: Options) =>\n  new EqualsOperation(\n    new RegExp(pattern, owneryQuery.$options),\n    owneryQuery,\n    options\n  );\nexport const $not = (params: any, owneryQuery: Query, options: Options) =>\n  new $Not(params, owneryQuery, options);\nexport const $type = (clazz: Function, owneryQuery: Query, options: Options) =>\n  new EqualsOperation(\n    b => (b != null ? b instanceof clazz || b.constructor === clazz : false),\n    owneryQuery,\n    options\n  );\nexport const $and = (params: Query[], ownerQuery: Query, options: Options) =>\n  new $And(params, ownerQuery, options);\nexport const $all = $and;\nexport const $size = (params: number, ownerQuery: Query, options: Options) =>\n  new EqualsOperation(b => b && b.length === params, ownerQuery, options);\nexport const $options = () => null;\nexport const $where = (\n  params: string | Function,\n  ownerQuery: Query,\n  options: Options\n) => {\n  let test;\n\n  if (isFunction(params)) {\n    test = params;\n  } else if (!process.env.CSP_ENABLED) {\n    test = new Function(\"obj\", \"return \" + params);\n  } else {\n    throw new Error(\n      `In CSP mode, sift does not support strings in \"$where\" condition`\n    );\n  }\n\n  return new EqualsOperation(b => test.bind(b)(b), ownerQuery, options);\n};\n","import * as defaultOperations from \"./operations\";\nimport {\n  Query,\n  Options,\n  createQueryTester,\n  EqualsOperation,\n  createEqualsOperation\n} from \"./core\";\n\nconst createDefaultQueryTester = <TItem>(\n  query: Query,\n  { compare, operations }: Partial<Options> = {}\n) => {\n  return createQueryTester<TItem>(query, {\n    compare: compare,\n    operations: Object.assign({}, defaultOperations, operations)\n  });\n};\n\nexport { Query, EqualsOperation, createQueryTester, createEqualsOperation };\nexport * from \"./operations\";\n\nexport default createDefaultQueryTester;\n"],"names":[],"mappings":"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"}